#!/bin/bash
source /var/vcap/jobs/tests/lib/functions etcd

#Adding keys and values for etcd with user auth
addKeyVals() {
    local url=$1
    echo "Putting three keys..."
    etcdctl --user root:tests --endpoints=$url put foo bar
    etcdctl --user root:tests --endpoints=$url put pokemon psyduck
    etcdctl --user root:tests --endpoints=$url put avengers endgame
}

#Adding keys and values for etcd-tls
addKeyValsTls() {
    local url=$1
    echo "Putting three keys..."
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url put foo bar
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url put pokemon psyduck
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url put avengers endgame
    echo
}

#Trashing data for etcd with user auth
trashVals() {
    local url=$1
    echo "Trashing data..."
    etcdctl --user root:tests --endpoints=$url put pokemon ditto
    etcdctl --user root:tests --endpoints=$url del foo
    etcdctl --user root:tests --endpoints=$url put extraKey shouldNotExist
    echo
}

#Trasing data for etcd-tls
trashValsTls() {
    local url=$1
    echo "Trashing data..."
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url put pokemon ditto
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url del foo
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url put extraKey shouldNotExist
    echo
}

#Getting values from keys for etcd with auth
verifyVals() {
    local url=$1
    local rc=0
    if [[ $(etcdctl --user root:tests --endpoints=$url get foo --print-value-only) != "bar" ]]; then
        echo "!! foo key was not initialized properly"
        rc=1
    else
        echo "Got correct value for key foo"
    fi

    if [[ $(etcdctl --user root:tests --endpoints=$url get pokemon --print-value-only) != "psyduck" ]]; then
        echo "!! pokemon key was not initialized properly"
        rc=1
    else
        echo "Got correct value for key pokemon"
    fi

    if [[ $(etcdctl --user root:tests --endpoints=$url get avengers --print-value-only) != "endgame" ]]; then
        echo "!! avengers key was not initialized properly"
        rc=1
    else
        echo "Got correct value for key avengers"
    fi

    if [[ $(etcdctl --user root:tests --endpoints=$url get extraKey --print-value-only) != "" ]]; then
        etcdctl --user root:tests --endpoints=$url get extraKey --print-value-only
        echo "!! Overwrite did not work correctly"
        rc=1
    else
        echo "Overwrite works. extraKey doesn't exist"
    fi

    echo
    return $rc
}

#Getting values from keys for etcd-tls
verifyValsTls() {
    local url=$1
    local rc=0
    if [[ $(etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url get foo --print-value-only) != "bar" ]]; then
        echo "!! foo key was not initialized properly"
        rc=1
    else
        echo "Got correct value for key foo"
    fi

    if [[ $(etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url get pokemon --print-value-only) != "psyduck" ]]; then
        echo "!! pokemon key was not initialized properly"
        rc=1
    else
        echo "Got correct value for key pokemon"
    fi

    if [[ $(etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url get avengers --print-value-only) != "endgame" ]]; then
        echo "!! avengers key was not initialized properly"
        rc=1
    else
        echo "Got correct value for key avengers"
    fi

    if [[ $(etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url get extraKey --print-value-only) != "" ]]; then
        echo "!! Overwrite did not work correctly"
        rc=1
    else
        echo "Overwrite works. extraKey doesn't exist"
    fi

    echo
    return $rc
}

#Prints all keys and values
dumpKeys() {
    local url=$1
    echo "Printing all keys and values"
    etcdctl --endpoints=$url --user root:tests get "" --prefix=true
    echo
}

#Prints all keys and values for etcd-tls
dumpKeysTls() {
    local url=$1
    echo "Printing all keys and values"
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url get "" --prefix=true
    echo
}

#Deletes all keys/values
deleteVals() {
    local url=$1
    echo "Deleting keys and values"
    etcdctl --endpoints=$url del "" --prefix=true
    echo
}

#Deletes all keys/values for etcd-tls
deleteValsTls() {
    local url=$1
    echo "Deleting keys and values"
    etcdctl --cacert=/var/vcap/jobs/tests/data/etcd-tls/tls/cert.pem --key=/var/vcap/data/targets/etcd/key.pem --cert=/var/vcap/data/targets/etcd/cert.pem --endpoints=$url del "" --prefix=true
    echo
}

runTests() {
    local target=$1
    local url=$2
    local rc=0

    export PATH=$PATH:/var/vcap/packages/etcd/bin/
    export ETCDCTL_API=3

    echo -e ">> Setting up test data\n"
    if [ "$target" == "etcd-notls" ]; then
        deleteVals $url
        etcdctl --endpoints=$url user add root:tests
        etcdctl --endpoints=$url user grant-role root root
        etcdctl --endpoints=$url auth enable
        addKeyVals $url
        dumpKeys $url
    else
        deleteValsTls $url
        addKeyValsTls $url
        dumpKeysTls $url
    fi

    echo ">> running backup job"
    wait_for_task $(shield run-job ${target}-daily | jq -r '.task_uuid')
    echo

    echo -e ">> Messing up data\n"
    if [ "$target" == "etcd-notls" ]; then
        trashVals $url
        dumpKeys $url
    else
        trashValsTls $url
        dumpKeysTls $url
    fi
    echo

    if ! check_encryption ${target}; then
        rc=1
    fi

    echo ">> restoring from backups"
    wait_for_task $(restore_latest ${target})
    echo

    echo -e ">> Verifying test data\n"
    if [ "$target" == "etcd-notls" ]; then
        verifyVals $url
        rc=$?
        dumpKeys $url
        etcdctl --endpoints=$url --user root:tests auth disable
        etcdctl --endpoints=$url user revoke-role root root
        etcdctl --endpoints=$url user delete root
        deleteVals $url
    else
        verifyValsTls $url
        dumpKeysTls $url
        rc=$?
        deleteValsTls $url
    fi

    return $rc;
}

rc=0
cat <<EOF


###### ########  ###### ######
#         #     #       #     #
#         #    #        #      #
#####     #    #        #       #
#         #    #        #      #
#         #     #       #     #
######    #      ###### #####


EOF

echo ">> configuring SHIELD"
cat <<EOF | shield import -
core:  http://<%= link('shield').instances[0].address %>:8080
token: $SHIELD_AUTH_TOKEN

tenants:
  - name: Default Tenant

    systems:
      - name:   etcd-notls
        plugin: etcd
        agent:  $TARGET:5444
        config:
          endpoints:                http://$TARGET:2379
          fullOverwrite:            true
          auth:						true
          user:                     root
          pass:                     tests
        jobs:
          - name:    etcd-notls-daily
            when:    daily 1am
            retain:  2d
            storage: s3
            paused:  yes

      - name:   etcd-tls
        plugin: etcd
        agent:  $TARGET:5444
        config:
          endpoints:                https://$TARGET:2479
          fullOverwrite:            true
          auth:						true
          caCertPath:				/var/vcap/jobs/targets/config/etcd/tls/cert.pem
          clientCertPath:			/var/vcap/data/targets/etcd/cert.pem
          clientKeyPath:			/var/vcap/data/targets/etcd/key.pem
        jobs:
          - name:    etcd-tls-daily
            when:    daily 1am
            retain:  2d
            storage: s3
            paused:  yes
EOF

echo "Testing etcd without tls..."
runTests etcd-notls http://$TARGET:2379
rc=$?
echo

echo "Testing etcd with tls..."
runTests etcd-tls https://$TARGET:2479
rc=$(($rc + $?))

exit $rc