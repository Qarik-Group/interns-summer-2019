#!/bin/bash
source /var/vcap/jobs/tests/lib/functions postgres

psql() {
  command psql -h $TARGET -U vcap "$@"
}

rc=0
cat <<EOF


########   #######   ######  ########  ######   ########  ########  ######
##     ## ##     ## ##    ##    ##    ##    ##  ##     ## ##       ##    ##
##     ## ##     ## ##          ##    ##        ##     ## ##       ##
########  ##     ##  ######     ##    ##   #### ########  ######    ######
##        ##     ##       ##    ##    ##    ##  ##   ##   ##             ##
##        ##     ## ##    ##    ##    ##    ##  ##    ##  ##       ##    ##
##         #######   ######     ##     ######   ##     ## ########  ######


EOF
echo ">> configuring SHIELD"
cat <<EOF | shield import -
core:  http://<%= link('shield').instances[0].address %>:8080
token: $SHIELD_AUTH_TOKEN

tenants:
  - name: Default Tenant

    systems:
      - name:   postgres-all
        plugin: postgres
        agent:  $TARGET:5444
        config:
          pg_host:     localhost
          pg_user:     vcap
          pg_password: ''
        jobs:
          - name:    postgres-all-daily
            when:    daily 4am
            retain:  2d
            storage: s3
            paused:  yes

      - name:   postgres-single
        plugin: postgres
        agent:  $TARGET:5444
        config:
          pg_host:     localhost
          pg_user:     vcap
          pg_password: ''
          pg_database: db1
        jobs:
          - name:    postgres-single-daily
            when:    daily 4am
            retain:  2d
            storage: s3
            paused:  yes
EOF

# ALL DATABASES {{{
echo "> Postgres - All Databases"
echo ">> setting up test data"
psql postgres <$ROOT/init.sql
psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' >$TMP/db1.dat
psql db2 -c 'SELECT * FROM t_keys ORDER BY ID ASC' >$TMP/db2.dat
echo "   db1.t_vals contains:"
sed -e 's/^/    /' <$TMP/db1.dat
echo
echo "   db2.t_keys contains:"
sed -e 's/^/    /' <$TMP/db2.dat
echo

echo ">> running backup job"
wait_for_task $(shield run-job postgres-all-daily | jq -r '.task_uuid')
echo

if ! check_encryption postgres-all; then
    rc=1
fi

echo ">> trashing the data"
echo "   deleting all db1.t_vals records with id's greater than 2"
psql db1 -c 'DELETE FROM t_vals WHERE id > 2'
echo "   db1.t_vals contains:"
psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' | sed -e 's/^/    /';

echo "   dropping the db2 databse outright"
psql postgres -c 'DROP DATABASE db2'
echo "   current databases:"
psql db1 -c '\l' | sed -e 's/^/    /';
echo

echo ">> restoring from backups"
wait_for_task $(restore_latest postgres-all)
echo

echo ">> verifying data, post-restore"
echo "   contents of db1.t_vals:"
psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' | sed -e 's/^/    /'

echo "   contents of db2.t_keys:"
psql db2 -c 'SELECT * FROM t_keys ORDER BY ID ASC' | sed -e 's/^/    /'
echo

psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' >$TMP/db1.post
psql db2 -c 'SELECT * FROM t_keys ORDER BY ID ASC' >$TMP/db2.post

if ! diff -u $TMP/db1.dat $TMP/db1.post &>/dev/null; then
	echo "!! db1 was not properly restored!"
	echo
	diff -u $TMP/db1.dat $TMP/db1.post || true
	echo
	rc=1
fi

if ! diff -u $TMP/db2.dat $TMP/db2.post &>/dev/null; then
	echo "!! db2 was not properly restored!"
	echo
	diff -u $TMP/db2.dat $TMP/db2.post || true
	echo
	rc=1
fi
# }}}
echo
echo
# SINGLE DATABASE {{{
echo "> Postgres - Single Databases"
echo ">> setting up test data"
psql postgres <$ROOT/init.sql
psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' >$TMP/db1.dat
psql db2 -c 'SELECT * FROM t_keys ORDER BY ID ASC' >$TMP/db2.dat
echo "   db1.t_vals contains:"
sed -e 's/^/    /' <$TMP/db1.dat
echo
echo "   db2.t_keys contains:"
sed -e 's/^/    /' <$TMP/db2.dat
echo

echo ">> running backup job"
wait_for_task $(shield run-job postgres-single-daily | jq -r '.task_uuid')
echo

if ! check_encryption postgres-single; then
    rc=1
fi

echo ">> trashing the data"
echo "   deleting all db1.t_vals records with id's greater than 2"
psql db1 -c 'DELETE FROM t_vals WHERE id > 2'
echo "   db1.t_vals contains:"
psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' | sed -e 's/^/    /';
echo
echo "   truncating the db2.t_keys table altogether"
psql db2 -c 'TRUNCATE TABLE t_keys'
echo "   db2.t_keys contains:"
psql db2 -c 'SELECT * FROM t_keys ORDER BY ID ASC' | sed -e 's/^/    /';
echo

echo ">> restoring from backups"
wait_for_task $(restore_latest postgres-single)
echo

echo ">> verifying data, post-restore"
echo "   contents of db1.t_vals:"
psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' | sed -e 's/^/    /'

echo "   contents of db2.t_keys:"
psql db2 -c 'SELECT * FROM t_keys ORDER BY ID ASC' | sed -e 's/^/    /'
echo

psql db1 -c 'SELECT * FROM t_vals ORDER BY ID ASC' >$TMP/db1.post
psql db2 -c 'SELECT * FROM t_keys ORDER BY ID ASC' >$TMP/db2.post

if ! diff -u $TMP/db1.dat $TMP/db1.post &>/dev/null; then
	echo "!! db1 was not properly restored!"
	echo
	diff -u $TMP/db1.dat $TMP/db1.post || true
	echo
	rc=1
fi

if diff -u $TMP/db2.dat $TMP/db2.post &>/dev/null; then
	echo "!! db2 should have been left alone, but was not..."
	echo "   (pre- and post- dumps are IDENTICAL, even though we didn't restore db2)"
	echo
	rc=1
fi
# }}}

exit $rc;
